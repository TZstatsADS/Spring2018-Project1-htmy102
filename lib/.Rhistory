par(mfrow=c(1,2))
began_months <- summary(factor(nodes$adoption_date))
plot(began_months[1:17],type="b",xlab="Month",ylab=" Doctors Who Began")
began_months <- summary(factor(nodes$adoption_date))
plot(began_months[1:17],type="b",xlab="Month",ylab=" Doctors Who Began")
plot(began_months[1:17],type="b",xlab="Month",ylab=" Doctors Who Began")
plot(began_months[1:17],type="b",xlab="Month",ylab=" Doctors Who Began")
my.v <- nodes$index[is.na(nodes$adoption_date)==F]
# Check
length(my.v)
nodes <- nodes[my.v,]
par(mfrow=c(1,2))
began_months <- summary(factor(nodes$adoption_date))
plot(began_months[1:17],type="b",xlab="Month",ylab=" Doctors Who Began")
par(mfrow=c(1,2))
month <- table(nodes$adoption_date)[1:17]
plot(names(month), month, xlab = "Month",
ylab = "Doctors", main = "Plot of Adoption Date")
par(mfrow=c(1,2))
month <- table(nodes$adoption_date)[1:17]
plot(names(month), month, xlab = "Month",
ylab = "Doctors", main = "Plot of Adoption Date")
month <- table(nodes$adoption_date)[1:17]
month
nodes <- read.csv("ckm_nodes.csv")
began_months <- summary(factor(nodes$adoption_date))
began_months
my.v <- nodes$index[is.na(nodes$adoption_date)==F]
# Check
length(my.v)
nodes <- nodes[my.v,]
par(mfrow=c(1,2))
began_months <- summary(factor(nodes$adoption_date))
plot(began_months[1:17],type="b",xlab="Month",ylab=" Doctors Who Began")
which(is.na(nodes$adoption_date)==F])
which(is.na(nodes$adoption_date)==F)
nodes <- read.csv("ckm_nodes.csv")
began_months <- summary(factor(nodes$adoption_date))
began_months
nodes$which(is.na(nodes$adoption_date)==F)
which(is.na(nodes$adoption_date)==F)
my.v <- which(is.na(nodes$adoption_date)==F)
length(my.v)
nodes <- nodes[my.v,]
par(mfrow=c(1,2))
began_months <- summary(factor(nodes$adoption_date))
plot(began_months[1:17],type="b",xlab="Month",ylab=" Doctors Who Began")
total <- began_months[1]
for(i in 2:length(began_months)){
total[i] <- total[i-1]+ began_months[i]
}
plot(total[1:17],type="b",xlab="Month",ylab=" Total Number of Doctors")
which[whether_2==1]
whether_2 <- ifelse(nodes$adoption_date<=2,1,0)
which[whether_2==1]
whether_2_index <- which(whether_2==1)
length(whether_2_index)
whether_2 <- ifelse(nodes$adoption_date<=2,1,0)
whether_2_index <- which(whether_2==1)
# Check
length(whether_2_index)
whether_14 <- ifelse(nodes$adoption_date > 14,1,0)
whether_14_index <- which(whether_14==1)
# Check
length(whether_14_index)
which(whether_14==1)
length(whether_14_index)
adopters <- function(month, not.yet=F){
if(not.yet==F){
whether <- ifelse(nodes$adoption_date == month,1,0)
return(which(whether==1))
}
if(not.yet==T){
whether <- ifelse(nodes$adoption_date > month,1,0)
return(which(whether==1))
}
}
length(adopters(2))
length(adopters(14,not.yet=T))
adopters <- function(month, not.yet=F){
if(not.yet==F){
whether <- ifelse(nodes$adoption_date == month,1,0)
return(which(whether==1))
}
if(not.yet==T){
whether <- ifelse(nodes$adoption_date > month,1,0)
return(which(whether==1))
}
}
length(adopters(2))
length(adopters(14,not.yet=T))
adopters <- function(month, not.yet=F){
if(not.yet==F){
whether <- ifelse(nodes$adoption_date == month,1,0)
return(which(whether==1))
}
if(not.yet==T){
whether <- ifelse(nodes$adoption_date > month,1,0)
return(which(whether==1))
}
}
length(adopters(2))
length(adopters(14,not.yet=T))
adopters <- function(month, not.yet=F){
if(not.yet==F){
whether <- ifelse(nodes$adoption_date == month,1,0)
return(which(whether==1))
}
if(not.yet==T){
whether <- ifelse(nodes$adoption_date > month,1,0)
return(which(whether==1))
}
}
length(adopters(2))
length(adopters(14,not.yet=T))
adopters <- function(month, not.yet=F){
if(not.yet==F){
return(which(nodes$adoption_date == month))
}
else{
return(which(nodes$adoption_date > month))
}
}
length(adopters(2))
length(adopters(month=14, not.yet = TRUE))
length(adopters(2))
length(adopters(14,not.yet=T))
adopters <- function(month, not.yet=F){
if(not.yet==F){
return(which(nodes$adoption_date == month))
}
else{
return(which(nodes$adoption_date > month))
}
}
length(adopters(2))
length(adopters(14,not.yet=T))
network <- read.table("ckm_network.txt")
dim(network)
network <- network[-adopt_date, -adopt_date]
network <- read.table("ckm_network.txt")
network <- network[my.v,my.v]
contacts <- colSums(network)
# Check
contacts[41]
nodes <- read.csv("ckm_nodes.csv")
dim(nodes)
head(nodes)
table(nodes$adoption_date)
nrow(subset(nodes, nodes$adoption_date=="Inf"))
sum(is.na(nodes$adoption_date))
adopt_date <- which(is.na(nodes$adoption_date))
nodes <- nodes[-adopt_date, ]
nrow(nodes)
nrow(is.na(nodes$adoption_date))
month <- table(nodes$adoption_date)[1:17]
plot(names(month), month, xlab = "Month",
ylab = "Doctors", main = "Plot of Adoption Date")
plot(names(month), cumsum(month), xlab = "Month",
ylab = "Doctors", main = "Total Doctors Each Month")
ad2 <- nodes$adoption_date <=2
ad2.ind <- which(ad2)
length(ad2.ind)
ad14 <- nodes$adoption_date >14
ad14.ind <- which(ad14)
length(ad14.ind)
adopters <- function(month, not.yet=FALSE){
if(not.yet==FALSE){
return(which(nodes$adoption_date == month))
}
else{
return(which(nodes$adoption_date > month))
}
}
length(adopters(2))
length(adopters(month=14, not.yet = TRUE))
network <- read.table("ckm_network.txt")
dim(network)
network <- network[-adopt_date, -adopt_date]
dim(network)
network <- read.table("ckm_network.txt")
network <- network[my.v,my.v]
network <- read.table("ckm_network.txt")
dim(network)
network <- network[my.v,my.v]
dim(network)
nub_contact <- apply(network, 1, sum)
nub_contact[41]
contact_37 <- (network[, 37]) & (nodes$adoption_date <= 5)
sum(as.numeric(contact_37==TRUE))
net_37 <- sum(as.numeric(network[,37]))
proportion <- sum(as.numeric(contact_37==TRUE))/net_37
proportion
my.v2 <- rep(0,nrow(network))
for(i in 1:nrow(network)){
if(network[i,37]==1 & nodes$adoption_date[i] <= 5){my.v2[i] <- T}
else{my.v2[i] <- F}
}
my.v2 <- as.logical(my.v2)
# Check
sum(my.v2)
# Proportion
sum(my.v2)/contacts[37]
count_peer_pressure <- function(doctor,month){
my.v3 <- rep(0,nrow(network))
for(i in 1:nrow(network)){
if(network[i,doctor]==1 & nodes[i,]$adoption_date <= month){my.v3[i] <- 1}
else{my.v3[i] <- 0}
}
return(sum(my.v3))
}
# Check
count_peer_pressure(doctor=37,month=5)
count_peer_pressure <- function(index, month){
out <- network[,index]  & (nodes$adoption_date <=month)
return(sum(as.numeric(out==TRUE)))
}
count_peer_pressure(37, 5)
prop_peer_pressure <- function(doctor,month){
prop <- count_peer_pressure(doctor,month)/contacts[doctor]
return(prop)
}
# Check
prop_peer_pressure(doctor=37,month=5)
prop_peer_pressure(doctor=102,month=14)
prop_peer_pressure <- function(index, month){
if(nub_contact[index]==0){
return(print(NaN))
}
else{
return(count_peer_pressure(index, month)/nub_contact[index])
}
}
prop_peer_pressure(37, 5)
prop_peer_pressure(102, 14)
fun <- function(month){
avg1 <- mean(sapply(adopters(month), prop_peer_pressure, month), na.rm = TRUE)
avg2 <- mean(sapply(adopters(month, not.yet = TRUE),
prop_peer_pressure, month), na.rm = TRUE)
return(c(avg1, avg2))
}
prop1  <- sapply(1:17, fun)[1,]
prop2  <- sapply(1:17, fun)[2,]
plot(1:17, prop1, type = "l", xlab = "Month")
points(1:17, prop2, type = "l", col = "red")
legend("bottomright", c("Adopt", "Not.yet"), fill = c(1,2))
points(1:17, prop2, type = "l", col = "red")
prop1  <- sapply(1:17, fun)[1,]
prop2  <- sapply(1:17, fun)[2,]
plot(1:17, prop1, type = "l", xlab = "Month")
points(1:17, prop2, type = "l", col = "red")
legend("bottomright", c("Adopt", "Not.yet"), fill = c(1,2))
my.f <- function(month){
avg1 <- mean(sapply(adopters(month), prop_peer_pressure, month), na.rm = T)
avg2 <- mean(sapply(adopters(month, not.yet = T),
prop_peer_pressure, month), na.rm = T)
return(c(avg1, avg2))
}
prop1  <- sapply(1:17, my.f)[1,]
prop2  <- sapply(1:17, my.f)[2,]
plot(1:17, prop1, type = "l", xlab = "Month")
points(1:17, prop2, type = "l", col = "red")
legend("bottomright", c("Adopt", "Not.yet"), fill = c(1,2))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
nodes <- read.csv("ckm_nodes.csv")
began_months <- summary(factor(nodes$adoption_date))
began_months
my.v <- which(is.na(nodes$adoption_date)==F)
# Check
length(my.v)
nodes <- nodes[my.v,]
par(mfrow=c(1,2))
began_months <- summary(factor(nodes$adoption_date))
plot(began_months[1:17],type="b",xlab="Month",ylab=" Doctors Who Began")
total <- began_months[1]
for(i in 2:length(began_months)){
total[i] <- total[i-1]+ began_months[i]
}
plot(total[1:17],type="b",xlab="Month",ylab=" Total Number of Doctors")
whether_2 <- ifelse(nodes$adoption_date<=2,1,0)
whether_2_index <- which(whether_2==1)
# Check
length(whether_2_index)
whether_14 <- ifelse(nodes$adoption_date > 14,1,0)
whether_14_index <- which(whether_14==1)
# Check
length(whether_14_index)
adopters <- function(month, not.yet=F){
if(not.yet==F){
return(which(nodes$adoption_date == month))
}
else{
return(which(nodes$adoption_date > month))
}
}
length(adopters(2))
length(adopters(14,not.yet=T))
network <- read.table("ckm_network.txt")
dim(network)
network <- network[my.v,my.v]
dim(network)
contacts <- colSums(network)
# Check
contacts[41]
my.v2 <- rep(0,nrow(network))
for(i in 1:nrow(network)){
if(network[i,37]==1 & nodes$adoption_date[i] <= 5){my.v2[i] <- T}
else{my.v2[i] <- F}
}
my.v2 <- as.logical(my.v2)
# Check
sum(my.v2)
# Proportion
sum(my.v2)/contacts[37]
count_peer_pressure <- function(doctor,month){
my.v3 <- rep(0,nrow(network))
for(i in 1:nrow(network)){
if(network[i,doctor]==1 & nodes[i,]$adoption_date <= month){my.v3[i] <- 1}
else{my.v3[i] <- 0}
}
return(sum(my.v3))
}
# Check
count_peer_pressure(doctor=37,month=5)
prop_peer_pressure <- function(doctor,month){
prop <- count_peer_pressure(doctor,month)/contacts[doctor]
return(prop)
}
# Check
prop_peer_pressure(doctor=37,month=5)
prop_peer_pressure(doctor=102,month=14)
prop1  <- sapply(1:17, my.f)[1,]
my.f <- function(month){
avg1 <- mean(sapply(adopters(month), prop_peer_pressure, month), na.rm = T)
avg2 <- mean(sapply(adopters(month, not.yet = T),
prop_peer_pressure, month), na.rm = T)
return(c(avg1, avg2))
}
prop1  <- sapply(1:17, my.f)[1,]
prop1  <- sapply(1:17, my.f)[1,]
count_peer_pressure <- function(index, month){
out <- network[,index]  & (nodes$adoption_date <=month)
return(sum(as.numeric(out==TRUE)))
}
count_peer_pressure(37, 5)
# Check
count_peer_pressure(doctor=37,month=5)
count_peer_pressure <- function(index, month){
out <- network[,index]  & (nodes$adoption_date <=month)
return(sum(as.numeric(out==TRUE)))
}
count_peer_pressure(37, 5)
# Check
count_peer_pressure(doctor=37,month=5)
count_peer_pressure <- function(index, month){
out <- network[,index]  & (nodes$adoption_date <=month)
return(sum(as.numeric(out==TRUE)))
}
count_peer_pressure(37, 5)
# Check
count_peer_pressure(index=37,month=5)
count_peer_pressure <- function(index, month){
out <- network[,index]  & (nodes$adoption_date <=month)
return(sum(as.numeric(out==TRUE)))
}
# Check
count_peer_pressure(index=37,month=5)
prop_peer_pressure <- function(index, month){
if(nub_contact[index]==0){
return(print(NaN))
}
else{
return(count_peer_pressure(index, month)/nub_contact[index])
}
}
prop_peer_pressure <- function(index, month){
if(contacts[index]==0){
return(print(NaN))
}
else{
return(count_peer_pressure(index, month)/contacts[index])
}
}
# Check
prop_peer_pressure(doctor=37,month=5)
prop_peer_pressure <- function(index, month){
if(contacts[index]==0){
return(print(NaN))
}
else{
return(count_peer_pressure(index, month)/contacts[index])
}
}
# Check
prop_peer_pressure(index=37,month=5)
prop_peer_pressure(index=102,month=14)
prop_peer_pressure <- function(index, month){
if(contacts[index]==0){
return(print(NaN))
}
else{
return(count_peer_pressure(index, month)/contacts[index])
}
}
# Check
prop_peer_pressure(index=37,month=5)
prop_peer_pressure(index=102,month=14)
my.f <- function(month){
avg1 <- mean(sapply(adopters(month), prop_peer_pressure, month), na.rm = T)
avg2 <- mean(sapply(adopters(month, not.yet = T),
prop_peer_pressure, month), na.rm = T)
return(c(avg1, avg2))
}
prop1  <- sapply(1:17, my.f)[1,]
prop2  <- sapply(1:17, my.f)[2,]
plot(1:17, prop1, type = "l", xlab = "Month")
points(1:17, prop2, type = "l", col = "red")
legend("bottomright", c("Adopt", "Not.yet"), fill = c(1,2))
prop1
prop2
prop_peer_pressure <- function(index, month){
if(contacts[index]==0){
return(NaN)
}
else{
return(count_peer_pressure(index, month)/contacts[index])
}
}
# Check
prop_peer_pressure(index=37,month=5)
prop_peer_pressure(index=102,month=14)
my.f <- function(month){
avg1 <- mean(sapply(adopters(month), prop_peer_pressure, month), na.rm = T)
avg2 <- mean(sapply(adopters(month, not.yet = T),
prop_peer_pressure, month), na.rm = T)
return(c(avg1, avg2))
}
prop1  <- sapply(1:17, my.f)[1,]
prop2  <- sapply(1:17, my.f)[2,]
plot(1:17, prop1, type = "l", xlab = "Month")
points(1:17, prop2, type = "l", col = "red")
legend("bottomright", c("Adopt", "Not.yet"), fill = c(1,2))
month=5
adopters(month)
sapply(adopters(month), prop_peer_pressure, month)
mean(sapply(adopters(month), prop_peer_pressure, month)
)
avg1 <- mean(sapply(adopters(month), prop_peer_pressure, month), na.rm = T)
avg2 <- mean(sapply(adopters(month, not.yet = T),
prop_peer_pressure, month), na.rm = T)
c(avg1, avg2)
prop1  <- sapply(1:17, my.f)[1,]
prop2  <- sapply(1:17, my.f)[2,]
plot(1:17, prop1, type = "l", xlab = "Month")
points(1:17, prop2, type = "l", col = "red")
prop1  <- sapply(1:17, my.f)[1,]
prop2  <- sapply(1:17, my.f)[2,]
plot(1:17, prop1, type = "l", xlab = "Month")
points(1:17, prop2, type = "l", col = "red")
legend("bottomright", c("Adopt", "Not.yet"), fill = c(1,2))
prop1  <- sapply(1:17, my.f)[1,]
prop2  <- sapply(1:17, my.f)[2,]
plot(1:17, prop1, type = "l", xlab = "Month")
points(1:17, prop2, type = "l", col = "red")
legend("bottomright", c("Adopt", "Not Yet"), fill = c(1,2))
prop1  <- sapply(1:17, my.f)[1,]
prop2  <- sapply(1:17, my.f)[2,]
plot(1:17, prop1, type = "l", xlab = "Month")
points(1:17, prop2, type = "l", col = "red")
legend("bottomright", c("Adopted", "Not Yet"), fill = c(1,2))
prop1  <- sapply(1:17, my.f)[1,]
prop2  <- sapply(1:17, my.f)[2,]
plot(1:17, prop1, type = "l", xlab = "Month")
points(1:17, prop2, type = "l", col = "Blue")
legend("bottomright", c("Adopted", "Not Yet"), fill = c(1,2))
prop1  <- sapply(1:17, my.f)[1,]
prop2  <- sapply(1:17, my.f)[2,]
plot(1:17, prop1, type = "l", xlab = "Month")
points(1:17, prop2, type = "l", col = "Red")
legend("bottomright", c("Adopted", "Not Yet"), fill = c(1,2))
sapply(1:17, my.f)
prop1  <- sapply(1:17, my.f)[1,]
prop2  <- sapply(1:17, my.f)[2,]
plot(1:17, prop1, type = "l", xlab = "Month")
points(1:17, prop2, type = "l", col = "Red")
legend("topright", c("Adopted", "Not Yet"), fill = c(1,2))
prop1  <- sapply(1:17, my.f)[1,]
prop2  <- sapply(1:17, my.f)[2,]
plot(1:17, prop1, type = "l", xlab = "Month")
points(1:17, prop2, type = "l", col = "Red")
legend("topleft", c("Adopted", "Not Yet"), fill = c(1,2))
prop1  <- apply(1:17, my.f)[1,]
prop1  <- sapply(1:17, my.f)[1,]
prop1  <- sapply(1:17, my.f)[1,]
prop2  <- sapply(1:17, my.f)[2,]
plot(1:17, prop1, type = "l", xlab = "Month",main="Average Proportions Over Time")
points(1:17, prop2, type = "l", col = "Red")
legend("topleft", c("Adopted", "Not Yet"), fill = c(1,2))
prop1  <- sapply(1:17, my.f)[1,]
prop2  <- sapply(1:17, my.f)[2,]
plot(1:17, prop1, type = "l", xlab = "Month",ylab="Proportions",
main="Average Proportions Over Time")
points(1:17, prop2, type = "l", col = "Red")
legend("topleft", c("Adopted", "Not Yet"), fill = c(1,2))
prop1  <- sapply(1:17, my.f)[1,]
prop2  <- sapply(1:17, my.f)[2,]
plot(1:17, prop1, type = "l", xlab = "Month",ylab="Proportion",
main="Average Proportions Over Time")
points(1:17, prop2, type = "l", col = "Red")
legend("topleft", c("Adopted", "Not Yet"), fill = c(1,2))
setwd("~/Documents/GitHub/Spring2018-Project1-htmy102/lib")
